sample <- simulate_PYP(n = 100, alpha = 0.5, theta = gamma = 10)
# sample from PYP
simulate_PYP <- function(n, alpha, gamma) {
if (alpha < 0 || alpha >= 1) stop("Il parametro di discount alpha deve essere in [0,1).")
if (gamma <= -alpha) stop("Il parametro di concentrazione theta deve essere maggiore di -alpha.")
cluster_labels <- numeric(n)  # Assegnazioni ai cluster
cluster_counts <- c()  # Conta il numero di elementi per ogni cluster
for (i in 1:n) {
if (i == 1 || runif(1) < (gamma + length(cluster_counts) * alpha) / (gamma + i - 1)) {
# Creazione di un nuovo cluster
cluster_counts <- c(cluster_counts, 1)
cluster_labels[i] <- length(cluster_counts)
} else {
# Assegna a un cluster esistente con probabilità proporzionale alla sua dimensione - d
probs <- (cluster_counts - alpha) / (theta + i - 1)
cluster_idx <- sample(length(cluster_counts), 1, prob = probs)
cluster_labels[i] <- cluster_idx
cluster_counts[cluster_idx] <- cluster_counts[cluster_idx] + 1
}
}
# Campiona valori per ogni cluster dalla base measure: Normale standard
unique_clusters <- unique(cluster_labels)
cluster_values <- rnorm(length(unique_clusters), mean = 0, sd = 1)
# Assegna i valori ai campioni in base ai cluster
sample_values <- cluster_values[cluster_labels]
return(sample_values)
}
#input:
n     = 8   # sample size
alpha = 0.5 # discount par
gamma = 10  # concentration par
# Esempio di utilizzo
set.seed(123)
sample <- simulate_PYP(n = 100, alpha = 0.5, theta = gamma = 10)
sample <- simulate_PYP(n = 100, alpha = 0.5, gamma = 10)
sample <- simulate_PYP(n = 100, alpha = 0.5, gamma = 10)
# sample from PYP
simulate_PYP <- function(n, alpha, gamma) {
if (alpha < 0 || alpha >= 1) stop("Il parametro di discount alpha deve essere in [0,1).")
if (gamma <= -alpha) stop("Il parametro di concentrazione theta deve essere maggiore di -alpha.")
cluster_labels <- numeric(n)  # Assegnazioni ai cluster
cluster_counts <- c()  # Conta il numero di elementi per ogni cluster
for (i in 1:n) {
if (i == 1 || runif(1) < (gamma + length(cluster_counts) * alpha) / (gamma + i - 1)) {
# Creazione di un nuovo cluster
cluster_counts <- c(cluster_counts, 1)
cluster_labels[i] <- length(cluster_counts)
} else {
# Assegna a un cluster esistente con probabilità proporzionale alla sua dimensione - d
probs <- (cluster_counts - alpha) / (gamma + i - 1)
cluster_idx <- sample(length(cluster_counts), 1, prob = probs)
cluster_labels[i] <- cluster_idx
cluster_counts[cluster_idx] <- cluster_counts[cluster_idx] + 1
}
}
# Campiona valori per ogni cluster dalla base measure: Normale standard
unique_clusters <- unique(cluster_labels)
cluster_values <- rnorm(length(unique_clusters), mean = 0, sd = 1)
# Assegna i valori ai campioni in base ai cluster
sample_values <- cluster_values[cluster_labels]
return(sample_values)
}
#input:
n     = 8   # sample size
alpha = 0.5 # discount par
gamma = 10  # concentration par
# Esempio di utilizzo
set.seed(123)
sample <- simulate_PYP(n = 100, alpha = 0.5, gamma = 10)
hist(sample, breaks = 30, main = "Campione da un Pitman-Yor Process", col = "lightblue")
# sample from PYP
simulate_PYP <- function(n, alpha, gamma) {
if (alpha < 0 || alpha >= 1) stop("Il parametro di discount alpha deve essere in [0,1).")
if (gamma <= -alpha) stop("Il parametro di concentrazione theta deve essere maggiore di -alpha.")
cluster_labels <- numeric(n)  # Assegnazioni ai cluster
cluster_counts <- c()  # Conta il numero di elementi per ogni cluster
for (i in 1:n) {
if (i == 1 || runif(1) < (gamma + length(cluster_counts) * alpha) / (gamma + i - 1)) {
# Creazione di un nuovo cluster
cluster_counts <- c(cluster_counts, 1)
cluster_labels[i] <- length(cluster_counts)
} else {
# Assegna a un cluster esistente con probabilità proporzionale alla sua dimensione - d
probs <- (cluster_counts - alpha) / (gamma + i - 1)
cluster_idx <- sample(length(cluster_counts), 1, prob = probs)
cluster_labels[i] <- cluster_idx
cluster_counts[cluster_idx] <- cluster_counts[cluster_idx] + 1
}
}
# Campiona valori per ogni cluster dalla base measure: Normale standard
unique_clusters <- unique(cluster_labels)
cluster_values <- rnorm(length(unique_clusters), mean = 0, sd = 1)
# Assegna i valori ai campioni in base ai cluster
sample_values <- cluster_values[cluster_labels]
return(sample_values)
}
# sample from PYP
simulate_PYP_clusters <- function(n, alpha, gamma, num_simulations = 10000) {
if (alpha < 0 || alpha >= 1) stop("Il parametro di discount alpha deve essere in [0,1).")
if (gamma <= -alpha) stop("Il parametro di concentrazione gamma deve essere maggiore di -alpha.")
num_clusters_list <- numeric(num_simulations)
for (sim in 1:num_simulations) {
cluster_counts <- c()  # Conta il numero di elementi per ogni cluster
for (i in 1:n) {
if (i == 1 || runif(1) < (gamma + length(cluster_counts) * alpha) / (gamma + i - 1)) {
# Creazione di un nuovo cluster
cluster_counts <- c(cluster_counts, 1)
} else {
# Assegna a un cluster esistente con probabilità proporzionale alla sua dimensione - alpha
probs <- (cluster_counts - alpha) / (gamma + i - 1)
cluster_idx <- sample(length(cluster_counts), 1, prob = probs)
cluster_counts[cluster_idx] <- cluster_counts[cluster_idx] + 1
}
}
# Salva il numero totale di cluster unici in questa simulazione
num_clusters_list[sim] <- length(cluster_counts)
}
# Stima della media e varianza del numero di cluster
mean_clusters <- mean(num_clusters_list)
var_clusters <- var(num_clusters_list)
return(list(mean_clusters = mean_clusters, var_clusters = var_clusters))
}
# Parametri
n <- 8
alpha <- 0.5
gamma <- 10
num_simulations <- 10000  # Numero di simulazioni Monte Carlo
# Eseguire la simulazione
set.seed(123)
result <- simulate_PYP_clusters(n, alpha, gamma, num_simulations)
# Stampa dei risultati
cat("Stima della media del numero di cluster:", result$mean_clusters, "\n")
cat("Stima della varianza del numero di cluster:", result$var_clusters, "\n")
num_simulations <- 1e8  # Numero di simulazioni Monte Carlo
# Eseguire la simulazione
set.seed(123)
result <- simulate_PYP_clusters(n, alpha, gamma, num_simulations)
num_simulations <- 1e6  # Numero di simulazioni Monte Carlo
# Eseguire la simulazione
set.seed(123)
result <- simulate_PYP_clusters(n, alpha, gamma, num_simulations)
# Stampa dei risultati
cat("Stima della media del numero di cluster:", result$mean_clusters, "\n")
cat("Stima della varianza del numero di cluster:", result$var_clusters, "\n")
num_simulations <- 1e7  # Numero di simulazioni Monte Carlo
# Eseguire la simulazione
set.seed(123)
result <- simulate_PYP_clusters(n, alpha, gamma, num_simulations)
# Stampa dei risultati
cat("Stima della media del numero di cluster:", result$mean_clusters, "\n")
cat("Stima della varianza del numero di cluster:", result$var_clusters, "\n")
