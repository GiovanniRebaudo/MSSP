aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "prob new")
ggplot(data =
data.frame(cbind(iter_considered,
output$theta_vecAcrossGibbs[iter_considered,])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "thetaj")
ggplot(data =
data.frame(cbind(iter_considered,
output$sigma_vecAcrossGibbs[iter_considered,])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "sigmaj")
ggplot(data =
data.frame(cbind(iter_considered,
output$sigma0AcrossGibbs[iter_considered])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
labs(x="iter", y = "theta0")
ggplot(data =
data.frame(cbind(iter_considered,
output$sigma0AcrossGibbs[iter_considered])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
labs(x="iter", y = "sigma0")
ggplot(data =
data.frame(cbind(iter_considered,
output$nTablesInRestaurantAcrossGibbs[iter_considered,])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "ntablesj")
}
ggplot(data =
data.frame(cbind(iter_considered,
output$sigma0AcrossGibbs[iter_considered])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
labs(x="iter", y = "theta0")
ggplot(data =
data.frame(cbind(iter_considered,
output$sigma0AcrossGibbs[iter_considered])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
labs(x="iter", y = "sigma0")
ggplot(data =
data.frame(cbind(iter_considered,
output$theta0AcrossGibbs[iter_considered])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
labs(x="iter", y = "theta0")
ggplot(data =
data.frame(cbind(iter_considered,
output$sigma_vecAcrossGibbs[iter_considered,])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "sigmaj")
ggplot(data =
data.frame(cbind(iter_considered,
output$theta_vecAcrossGibbs[iter_considered,])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "thetaj")
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_fcts.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_fcts.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
nrow(output_prob)
output=="prob new"
output_prob = out$prob_new_species
output_prob
out
out
out = HPYP_MCMC_fct(
nGibbsUpdates  = 1e4,
seed           = 123,
# seed to be fixed
Hyperprior     = T,
# learn hyperpar via full Bayes if  Hyperprior==T
niter_MH       = niter_MH,
# number of MH iterations for hyperpar update within each steps
I_j_vec        = I_j_vec,
Data_vec       = X_ji_vec,
shape_theta    = shape_theta,
rate_theta     = rate_theta,
a_sigma        = a_sigma,
b_sigma        = b_sigma,
output         = output
)
out
output
prob_new_species
prob_new_species
prob_new_species
output = "prob_new"# c("prob_new", "prob and last", "all")
out = HPYP_MCMC_fct(
nGibbsUpdates  = 1e4,
seed           = 123,
# seed to be fixed
Hyperprior     = T,
# learn hyperpar via full Bayes if  Hyperprior==T
niter_MH       = niter_MH,
# number of MH iterations for hyperpar update within each steps
I_j_vec        = I_j_vec,
Data_vec       = X_ji_vec,
shape_theta    = shape_theta,
rate_theta     = rate_theta,
a_sigma        = a_sigma,
b_sigma        = b_sigma,
output         = output
)
out
HPYP_MCMC_fct(
nGibbsUpdates  = 1e4,
seed           = 123,
# seed to be fixed
Hyperprior     = T,
# learn hyperpar via full Bayes if  Hyperprior==T
niter_MH       = niter_MH,
# number of MH iterations for hyperpar update within each steps
I_j_vec        = I_j_vec,
Data_vec       = X_ji_vec,
shape_theta    = shape_theta,
rate_theta     = rate_theta,
a_sigma        = a_sigma,
b_sigma        = b_sigma,
output         = output
)
output=="prob new"
output
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
# Additional checks and debugging
if(output=="prob_new"){
output_prob = out
} else {
output_prob = out$prob_new_species
}
output_prob
nGibbsUpdates = nrow(output_prob)
iter_considered = 1:nGibbsUpdates # iter_considered = burnin:nGibbsUpdates
# Check predictive probabilities
ggplot(data = data.frame(cbind(iter_considered, output_prob)),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "prob new")
burnin        = min(nGibbsUpdates/2,500)
# Choose the optimal arm
which.max(colMeans(output_prob[burnin:nGibbsUpdates,]))
colMeans(output_prob[burnin:nGibbsUpdates,])
if(output=="all"){
ggplot(data = data.frame(cbind(iter_considered, output_prob)),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "prob new")
ggplot(data =
data.frame(cbind(iter_considered,
out$theta_vecAcrossGibbs[iter_considered,])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "thetaj")
ggplot(data =
data.frame(cbind(iter_considered,
out$sigma_vecAcrossGibbs[iter_considered,])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "sigmaj")
ggplot(data =
data.frame(cbind(iter_considered,
out$theta0AcrossGibbs[iter_considered])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
labs(x="iter", y = "theta0")
ggplot(data =
data.frame(cbind(iter_considered,
out$sigma0AcrossGibbs[iter_considered])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
labs(x="iter", y = "sigma0")
ggplot(data =
data.frame(cbind(iter_considered,
out$nTablesInRestaurantAcrossGibbs[iter_considered,])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "ntablesj")
}
ggplot(data = data.frame(cbind(iter_considered, output_prob)),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "prob new")
ggplot(data =
data.frame(cbind(iter_considered,
out$theta_vecAcrossGibbs[iter_considered,])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "thetaj")
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
ggplot(data =
data.frame(cbind(iter_considered,
out$nTablesInRestaurantAcrossGibbs[iter_considered,])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "ntablesj")
ggplot(data =
data.frame(cbind(iter_considered,
out$sigma0AcrossGibbs[iter_considered])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
labs(x="iter", y = "sigma0")
output
# Additional checks and debugging
if(output=="prob_new"){
output_prob = out
} else {
output_prob = out$prob_new_species
}
nGibbsUpdates = nrow(output_prob)
iter_considered = 1:nGibbsUpdates # iter_considered = burnin:nGibbsUpdates
# Check predictive probabilities
ggplot(data = data.frame(cbind(iter_considered, output_prob)),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "prob new")
burnin        = min(nGibbsUpdates/2,500)
# Choose the optimal arm
which.max(colMeans(output_prob[burnin:nGibbsUpdates,]))
colMeans(output_prob[burnin:nGibbsUpdates,])
if(output=="all"){
ggplot(data = data.frame(cbind(iter_considered, output_prob)),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "prob new")
ggplot(data =
data.frame(cbind(iter_considered,
out$theta_vecAcrossGibbs[iter_considered,])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "thetaj")
ggplot(data =
data.frame(cbind(iter_considered,
out$sigma_vecAcrossGibbs[iter_considered,])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "sigmaj")
ggplot(data =
data.frame(cbind(iter_considered,
out$theta0AcrossGibbs[iter_considered])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
labs(x="iter", y = "theta0")
ggplot(data =
data.frame(cbind(iter_considered,
out$sigma0AcrossGibbs[iter_considered])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
labs(x="iter", y = "sigma0")
ggplot(data =
data.frame(cbind(iter_considered,
out$nTablesInRestaurantAcrossGibbs[iter_considered,])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "ntablesj")
}
Prop_sd_logit_sig_j
Prop_sd_logit_sig_j = out$Prop_sd_logit_sig_j
Prop_sd_logit_sig_j
Move_sigma_j_out = out$Move_sigma_j_out
Move_theta_j_out = out$Move_theta_j_out
Move_theta_j_out
colMeans(Move_sigma_j_out)
rowMeans(Move_sigma_j_out)
Move_sigma_j_out
rowMeans(Move_theta_j_out)
Move_sigma_j_out = out$Move_sigma_j_out
rowMeans(Move_sigma_j_out)
Move_theta_j_out = out$Move_theta_j_out
rowMeans(Move_theta_j_out)
out$Prop_sd_log_theta_j
out$Prop_sd_log_sigma_j
out$Prop_sd_log_sigma_j
out$Prop_sd_logit_sig_j
sigma_prop
sigma_prop = 0.6
sigma_old       = sigma_prop
log_1_sigma_old = log(1-sigma_old)
log_sigma_old
log_1_sigma_old
logit(sigma_old)
logis(sigma_old)
qlogis(sigma_old)
log_sigma_old-log_1_sigma_old
sigma_old       = sigma_prop
log_1_sigma_old = log(1-sigma_old)
logit_sigma_old = log_sigma_old-log_1_sigma_old # logit function
log(sigma_old) -log(1-sigma_old)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
if(output=="all" && Hyperprior){
Move_sigma_j_out = out$Move_sigma_j_out
rowMeans(Move_sigma_j_out)
Move_theta_j_out = out$Move_theta_j_out
rowMeans(Move_theta_j_out)
out$Prop_sd_log_theta_j
out$Prop_sd_logit_sig_j
}
Move_sigma_j_out = out$Move_sigma_j_out
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
P = ggplot(data = data.frame(cbind(iter_considered, output_prob)),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "prob new")
print(P)
if(output=="all"){
P = ggplot(data = data.frame(cbind(iter_considered, output_prob)),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "prob new")
print(P)
P = ggplot(data =
data.frame(cbind(iter_considered,
out$theta_vecAcrossGibbs[iter_considered,])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "thetaj")
print(P)
P = ggplot(data =
data.frame(cbind(iter_considered,
out$sigma_vecAcrossGibbs[iter_considered,])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "sigmaj")
print(P)
P = ggplot(data =
data.frame(cbind(iter_considered,
out$theta0AcrossGibbs[iter_considered])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
labs(x="iter", y = "theta0")
print(P)
P = ggplot(data =
data.frame(cbind(iter_considered,
out$sigma0AcrossGibbs[iter_considered])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
labs(x="iter", y = "sigma0")
print(P)
P = ggplot(data =
data.frame(cbind(iter_considered,
out$nTablesInRestaurantAcrossGibbs[iter_considered,])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "ntablesj")
print(P)
}
Move_sigma_j_out = out$Move_sigma_j_out
rowMeans(Move_sigma_j_out)
Move_theta_j_out = out$Move_theta_j_out
rowMeans(Move_theta_j_out)
out$Prop_sd_log_theta_j
out$Prop_sd_logit_sig_j
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
Move_sigma_j_out = out$Move_sigma_j_out
rowMeans(Move_sigma_j_out)
Move_theta_j_out = out$Move_theta_j_out
rowMeans(Move_theta_j_out)
out$Prop_sd_log_theta_j
out$Prop_sd_logit_sig_j
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
log_sigma_old-log(1-sigma_old)
sigma_old= 0.6
log(sigma_old)-log(1-sigma_old)
qlogis(sigma_old)
q_j_vec
Move_theta_j_out = out$Move_theta_j_out
rowMeans(Move_theta_j_out)
Move_sigma_j_out = out$Move_sigma_j_out
rowMeans(Move_sigma_j_out)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
rowMeans(Move_sigma_j_out)
q_j_vec
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
Move_sigma_j_out = out$Move_sigma_j_out
rowMeans(Move_sigma_j_out)
print(rowMeans(Move_theta_j_out))
print(rowMeans(Move_sigma_j_out))
print(rowMeans(Move_theta_j_out))
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
Move_theta_j_out[,seq_ada_step]
apply(Move_theta_j_out[,seq_ada_step], 1, mean)
apply(Move_theta_j_out[,seq_ada_step], 1, mean)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
P = ggplot(data = data.frame(cbind(iter_considered, output_prob)),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "prob new")
print(P)
P = ggplot(data = data.frame(cbind(iter_considered, output_prob)),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "prob new")
print(P)
P = ggplot(data =
data.frame(cbind(iter_considered,
out$theta_vecAcrossGibbs[iter_considered,])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "thetaj")
print(P)
P = ggplot(data =
data.frame(cbind(iter_considered,
out$sigma_vecAcrossGibbs[iter_considered,])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "sigmaj")
print(P)
P = ggplot(data =
data.frame(cbind(iter_considered,
out$theta0AcrossGibbs[iter_considered])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
labs(x="iter", y = "theta0")
print(P)
P = ggplot(data =
data.frame(cbind(iter_considered,
out$sigma0AcrossGibbs[iter_considered])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
labs(x="iter", y = "sigma0")
print(P)
P = ggplot(data =
data.frame(cbind(iter_considered,
out$nTablesInRestaurantAcrossGibbs[iter_considered,])),
aes(x = iter_considered)) +
geom_line(aes(y = V2), col=1) +
geom_line(aes(y = V3), col=2) +
geom_line(aes(y = V4), col=3) +
labs(x="iter", y = "ntablesj")
print(P)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/MSSP/MSSP_HPYP.R", echo=TRUE)
