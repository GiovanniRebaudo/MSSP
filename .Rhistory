#multiarmed bandit for species discovery via mSSP - simulation study
rm(list = ls())
library(rstudioapi) # version 0.15.0
library(ggplot2) # version 3.5.0
library(readxl) # version 1.4.3
#set working directory to Source file directory
#code to set the working directory to the current folder from RStudio
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("mSSPmab.R")
source("Functions-and-Extra/mSSPmab.R")
#set working directory to Source file directory
#code to set the working directory to the current folder from RStudio
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("Functions-and-Extra/mSSPmab.R")
###############which true pmf?
J = 8
pmfs = generate_zipf(param = c(rep(1.3, 4), rep(2, 4)),
tot_species = 3000, j_species = 2500, seed = 0)
################"Plot prob of tie"
#ptie matrix
ptie = matrix(NA, nrow = J, ncol = J)
row = matrix(rep(1:J,J), nrow = J)
col = t(row)
for(j in 1:J){
for(jj in j:J){
ptie[j,jj] = sum( ( pmfs[[j]] / sum( pmfs[[j]] ) ) *
( pmfs[[jj]] / sum( pmfs[[jj]] ) ) )
}
}
temp = t(ptie)
ptie[row>col] = temp[row>col]
ptie
#plot prob tie matrix
x = paste0("Group", seq(1,J))
# Multiarmed bandit for species discovery via mSSP - simulation study
rm(list = ls())
library(rstudioapi) # version 0.15.0
library(ggplot2) # version 3.5.0
library(readxl) # version 1.4.3
#set working directory to Source file directory
#code to set the working directory to the current folder from RStudio
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("Functions-and-Extra/mSSPmab.R")
############### true pmf
J = 8
pmfs = generate_zipf(param = c(rep(1.3, 4), rep(2, 4)),
tot_species = 3000, j_species = 2500, seed = 0)
################"Plot prob of tie"
# Compute ptie matrix
ptie = matrix(NA, nrow = J, ncol = J)
row = matrix(rep(1:J,J), nrow = J)
col = t(row)
for(j in 1:J){
for(jj in j:J){
ptie[j,jj] = sum( ( pmfs[[j]] / sum( pmfs[[j]] ) ) *
( pmfs[[jj]] / sum( pmfs[[jj]] ) ) )
}
}
temp = t(ptie)
ptie[row>col] = temp[row>col]
# Plot prob tie matrix
x = paste0("Group", seq(1,J))
y = paste0("Group", seq(1,J))
data = expand.grid(X=x, Y=y)
data$ptie = as.vector(ptie)
# Heatmap
ggplot(data, aes(X, Y, fill= ptie)) +
geom_tile(color = "white",
lwd = 1.5,
linetype = 1)+
scale_fill_gradient2(low = "#FFFFCC",
high = "#075AFF") +
geom_text(aes(label = format(ptie, scientific = TRUE, digits = 1) ),
color = "black")+
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.title.y=element_blank()) +
guides(fill=guide_legend(title="Prob. tie"))
############### How many initial and new samples?
init_samples = 30 # in each pop
new_samples = 300
###############how many replicas?
seed_replicas = seq(1,20)
tot_replica = length(seed_replicas)
###############initialize matrices and list to save for more replicas
results_plusDP = matrix(NA, nrow = new_samples, ncol = tot_replica)
results_plusPY = matrix(NA, nrow = new_samples, ncol = tot_replica)
results_indepDP = matrix(NA, nrow = new_samples, ncol = tot_replica)
results_indepPY = matrix(NA, nrow = new_samples, ncol = tot_replica)
results_random  = matrix(NA, nrow = new_samples, ncol = tot_replica)
results_oracle  = matrix(NA, nrow = new_samples, ncol = tot_replica)
results_HPY  = matrix(NA, nrow = new_samples, ncol = tot_replica)
results_HDP  = matrix(NA, nrow = new_samples, ncol = tot_replica)
est_prob_new_plusDP = vector("list", tot_replica)
est_prob_new_plusPY = vector("list", tot_replica)
est_prob_new_indepDP = vector("list", tot_replica)
est_prob_new_indepPY = vector("list", tot_replica)
est_prob_new_oracle = vector("list", tot_replica)
est_prob_new_HDP = vector("list", tot_replica)
est_prob_new_HPY = vector("list", tot_replica)
###############gibbs samplers
replica = 0
for(seed in seed_replicas){
replica = replica + 1
cat("\nReplica", replica, "out of", tot_replica, "\n")
###############sample observations for fair comparison of methods
X = sample_from_pop_all(truth = pmfs, size = init_samples + new_samples,
seed = seed, verbose = FALSE)
#solve MAB decision via uniform
results_random_temp = uniform_MAB(data = X, new_samples = new_samples,
seed = 0)
results_random[,replica] = results_random_temp$discoveries
#solve MAB decision via oracle
results_oracle_temp = oracle_MAB(data = X, pmfs = pmfs, new_samples = new_samples)
results_oracle[,replica] = results_oracle_temp$discoveries
est_prob_new_oracle[[replica]] = results_oracle_temp$probs
#solve MAB decisions via indepDP
results_indepDP_temp = indepDP_MAB(data = X, new_samples = new_samples,
seed = 0)
results_indepDP[,replica] = results_indepDP_temp$discoveries
est_prob_new_indepDP[[replica]] = results_indepDP_temp$probs
#solve MAB decisions via indepPY
results_indepPY_temp = indepPY_MAB(data = X, new_samples = new_samples, seed = 0)
results_indepPY[,replica] = results_indepPY_temp$discoveries
est_prob_new_indepPY[[replica]] = results_indepPY_temp$probs
#solve MAB decisions via plusDP
results_plusDP_temp = plusDP_MAB(data = X, new_samples = new_samples,
seed = 0)
results_plusDP[,replica] = results_plusDP_temp$discoveries
est_prob_new_plusDP[[replica]] = results_plusDP_temp$probs
#solve MAB decisions via plusPY
results_plusPY_temp = plusPY_MAB(data = X, new_samples = new_samples,
seed = 0)
results_plusPY[,replica] = results_plusPY_temp$discoveries
est_prob_new_plusPY[[replica]] = results_plusPY_temp$probs
#solve MAB decisions via plusMD (not available)
#results_plusMD = plusMD_MAB(data, new_samples = new_samples, seed = 0)
#solve MAB decisions via HPY
results_HPY_temp = HPY_MAB(data = X, new_samples = new_samples,
seed = 0)
results_HPY[,replica] = results_HPY_temp$discoveries
est_prob_new_HPY[[replica]] = results_HPY_temp$probs
#solve MAB decisions via HDP
results_HDP_temp = HDP_MAB(data = X, new_samples = new_samples,
seed = 0)
results_HDP[,replica] = results_HDP_temp$discoveries
est_prob_new_HDP[[replica]] = results_HDP_temp$probs
}
